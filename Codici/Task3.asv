%% AEROSPACE CONTROL SYSTEMS %%

clc, clear, close all

run Task1
run Task2

%% Pid controller 

R_p = tunablePID('R_p', 'PID');
R_p.InputName = {'p_error'}       
R_p.OutputName = {'delta_{lat}'}

R_phi = tunablePID('R_phi', 'P');
R_phi.InputName = {'phi_error'}       
R_phi.OutputName = {'p_0'}
%% Uncertain to be tuned complete system
Sum_p = sumblk('p_error = p_0 - p');
Sum_phi = sumblk('phi_error = phi_0 - phi');


innerLoop= connect(R_p,SYS,Sum_p,'p_0',{'p','phi'},'delta_{lat}')

outerLoop= connect(R_phi,innerLoop,Sum_phi,'phi_0',{'p','phi'})


figure(6)
pzmap(innerLoop)
grid on, hold on
pzmap(outerLoop)
legend('inner loop poles and zeros', 'outer loop poles and zeros')


figure (7)
bode(innerLoop)
grid on, hold on
bode(outerLoop)
legend('inner loop bode diagram', 'outer loop bode diagram')
%% M_delta form to be tuned complete system
[M_outerLoop,Delta_outerLoop] = lftdata(outerLoop)
% figure (8)
% bode(lft(Delta_outerLoop,M_outerLoop))
%% Nominal to be tuned complete system
outerLoop_n=lft(Delta_outerLoop,M_outerLoop).NominalValue
%% requisiti NP: funzione di trasferimento tra phi e phi_0
omega_n_2 = 10;
epsilon_2 = 0.9;
numeratore_2 = omega_n_2^2;
denominatore_2 = [1, 2*omega_n_2*epsilon_2, omega_n_2^2];
G_required_2 = tf(numeratore_2, denominatore_2)

omega_n = 15;
epsilon = 0.98;
numeratore = omega_n^2;
denominatore = [1, 2*omega_n*epsilon, omega_n^2];
G_required = tf(numeratore, denominatore)

figure(100) 
bode(G_required)
hold on
bode(G_required_2, 'r')

Req1 = TuningGoal.Transient('phi_0','phi',G_required, 'step');
Req2 = TuningGoal.Transient('phi_0','phi',G_required_2, 'step');

[CL,fSoft,fHard] = systune(outerLoop,Req1, Req2);
hold on
bode(CL(2))
hold on
%viewGoal(Req,CL)
figure()
pzmap(outerLoop)
hold on
pzmap(CL)

figure(101)
step(G_required)
hold on
step(G_required_2)
step(CL(2))
